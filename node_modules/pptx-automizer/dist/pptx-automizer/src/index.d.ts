import Automizer from './automizer';
import ModifyHelper, { CmToDxa, DxaToCm } from './helper/modify-helper';
import ModifyShapeHelper from './helper/modify-shape-helper';
import ModifyTableHelper from './helper/modify-table-helper';
import ModifyChartHelper from './helper/modify-chart-helper';
import { TemplateInfo, XmlDocument, XmlElement } from './types/xml-types';
import { AutomizerFile, AutomizerParams, AutomizerSummary, ShapeModificationCallback, StatusTracker } from './types/types';
import { ModifyTableParams, TableData, TableRow, TableRowStyle } from './types/table-types';
import { ChartBubble, ChartCategory, ChartData, ChartSeries, ChartValueStyle } from './types/chart-types';
import { Border, Color, ImageStyle, ReplaceText, TextStyle } from './types/modify-types';
import { ShapeCoordinates, ShapeValueStyle } from './types/shape-types';
import { XmlHelper } from './helper/xml-helper';
import ModifyTextHelper from './helper/modify-text-helper';
import ModifyColorHelper from './helper/modify-color-helper';
import { ITemplate } from './interfaces/itemplate';
import { IMaster } from './interfaces/imaster';
import { ISlide } from './interfaces/islide';
import { IPptxGenJSSlide } from './interfaces/ipptxgenjs-slide';
import ModifyImageHelper from './helper/modify-image-helper';
import { LabelPosition } from './enums/chart-type';
export type { ChartBubble, ChartCategory, ChartSeries, TableData, TableRow, TextStyle, ImageStyle, ModifyTableParams, TableRowStyle, ChartData, ChartValueStyle, Color, Border, ShapeValueStyle, ShapeCoordinates, ReplaceText, };
export { Automizer, XmlHelper, ModifyHelper, ModifyShapeHelper, ModifyTableHelper, ModifyChartHelper, ModifyTextHelper, ModifyColorHelper, ModifyImageHelper, LabelPosition, };
export declare const modify: {
    dump: (element: Element | XMLDocument) => void;
    dumpChart: (element: Element | XMLDocument, chart: XMLDocument) => void;
    setAttribute: (tagName: string, attribute: string, value: string | number, count?: number) => (element: XMLDocument) => void;
    setSolidFill: (element: Element) => void;
    setText: (text: string) => (element: Element) => void;
    setBulletList: (list: any) => (element: Element) => void;
    replaceText: (replaceText: ReplaceText | ReplaceText[], options?: import("./types/modify-types").ReplaceTextOptions) => (element: Element) => void;
    setPosition: (pos: ShapeCoordinates) => (element: Element) => void;
    updatePosition: (pos: ShapeCoordinates) => (element: Element) => void;
    rotateShape: (degrees: number) => (element: Element) => void;
    setTableData: (data: TableData) => (element: Element | XMLDocument) => void;
    adjustHeight: (data: TableData) => (element: Element | XMLDocument) => void;
    adjustWidth: (data: TableData) => (element: Element | XMLDocument) => void;
    updateColumnWidth: (index: number, size: number) => (element: Element | XMLDocument) => void;
    updateRowHeight: (index: number, size: number) => (element: Element | XMLDocument) => void;
    setTable: (data: TableData, params?: ModifyTableParams) => (element: Element) => void;
    setRelationTarget: (filename: string) => (element: Element, arg1: Element) => void;
    setDuotoneFill: (duotoneParams: {
        color?: Color;
        prstClr?: string;
        tint?: number;
        satMod?: number;
    }) => (element: Element) => void;
    setChartData: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setAxisRange: (range: import("./types/chart-types").ChartAxisRange) => import("./types/types").ChartModificationCallback;
    setExtendedChartData: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setChartVerticalLines: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setChartScatter: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setChartCombo: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setChartBubbles: (data: ChartData) => import("./types/types").ChartModificationCallback;
    setPlotArea: (plotArea: ShapeCoordinates) => import("./types/types").ChartModificationCallback;
    setLegendPosition: (legendArea: ShapeCoordinates) => import("./types/types").ChartModificationCallback;
    removeChartLegend: () => import("./types/types").ChartModificationCallback;
    minimizeChartLegend: () => import("./types/types").ChartModificationCallback;
    setWaterFallColumnTotalToLast: (TotalColumnIDX?: number) => import("./types/types").ChartModificationCallback;
    setChartTitle: (newTitle: string) => import("./types/types").ChartModificationCallback;
    setDataLabelAttributes: (dataLabel: import("./types/chart-types").ChartSeriesDataLabelAttributes) => import("./types/types").ChartModificationCallback;
    setHyperlinkTarget: (target: string, isExternal?: boolean) => ShapeModificationCallback;
    addHyperlink: (target: string | number) => ShapeModificationCallback;
    removeHyperlink: () => ShapeModificationCallback;
};
export declare const read: {
    readWorkbookData: (data: any) => import("./types/types").ChartModificationCallback;
    readChartInfo: (info: any) => import("./types/types").ChartModificationCallback;
};
export { CmToDxa, DxaToCm };
export type { AutomizerFile, AutomizerParams, AutomizerSummary, TemplateInfo, StatusTracker, ShapeModificationCallback, XmlElement, XmlDocument, };
export { ITemplate, IMaster, ISlide, IPptxGenJSSlide };
export default Automizer;
