/**
 * ApexPresentationGenerator - Generate HTML presentations directly in Salesforce
 * 
 * This class creates beautiful HTML slide presentations that can be:
 * - Viewed in browsers
 * - Printed to PDF
 * - Shared via Salesforce Files
 * - Used in Lightning components
 * 
 * @author Your Name
 * @version 1.0
 */
public class ApexPresentationGenerator {
    
    /**
     * Input class for invocable method
     */
    public class PresentationRequest {
        @InvocableVariable(label='Content' description='The text content for the presentation' required=true)
        public String content;
        
        @InvocableVariable(label='Title' description='Presentation title')
        public String title;
        
        @InvocableVariable(label='Theme' description='Color theme: blue, green, purple, orange')
        public String theme;
    }
    
    /**
     * Output class for invocable method
     */
    public class PresentationResult {
        @InvocableVariable(label='Presentation URL' description='URL to view the HTML presentation')
        public String presentationUrl;
        
        @InvocableVariable(label='File ID' description='Salesforce File ID for the presentation')
        public String fileId;
    }
    
    /**
     * Generate HTML presentation and store in Salesforce Files
     */
    @InvocableMethod(label='Generate HTML Presentation' description='Create a beautiful HTML slide presentation from content' category='Content Generation')
    public static List<PresentationResult> generateHTMLPresentation(List<PresentationRequest> requests) {
        List<PresentationResult> results = new List<PresentationResult>();
        
        for (PresentationRequest request : requests) {
            PresentationResult result = new PresentationResult();
            
            try {
                // Set defaults
                String title = String.isNotBlank(request.title) ? request.title : 'Generated Presentation';
                String theme = String.isNotBlank(request.theme) ? request.theme : 'blue';
                
                // Generate HTML content
                String htmlContent = generateHTMLSlides(request.content, title, theme);
                
                // Create file in Salesforce
                ContentVersion cv = new ContentVersion();
                cv.Title = title;
                cv.PathOnClient = title.replaceAll('[^a-zA-Z0-9]', '_') + '.html';
                cv.VersionData = Blob.valueOf(htmlContent);
                cv.ContentLocation = 'S'; // Stored in Salesforce
                insert cv;
                
                // Get the ContentDocument ID
                ContentVersion insertedCV = [SELECT ContentDocumentId FROM ContentVersion WHERE Id = :cv.Id LIMIT 1];
                
                // Create shareable link
                ContentDistribution cd = new ContentDistribution();
                cd.ContentVersionId = cv.Id;
                cd.Name = title;
                cd.PreferencesAllowOriginalDownload = true;
                cd.PreferencesAllowPDFDownload = true;
                cd.PreferencesAllowViewInBrowser = true;
                insert cd;
                
                // Get the shareable URL
                ContentDistribution insertedCD = [SELECT DistributionPublicUrl FROM ContentDistribution WHERE Id = :cd.Id LIMIT 1];
                
                result.presentationUrl = insertedCD.DistributionPublicUrl;
                result.fileId = insertedCV.ContentDocumentId;
                
            } catch (Exception e) {
                result.presentationUrl = 'Error: ' + e.getMessage();
                System.debug('Presentation generation error: ' + e.getMessage());
            }
            
            results.add(result);
        }
        
        return results;
    }
    
    /**
     * Generate HTML slide presentation
     */
    private static String generateHTMLSlides(String content, String title, String theme) {
        // Process content into slides
        List<String> slides = processContentIntoSlides(content);
        
        // Get theme colors
        Map<String, String> colors = getThemeColors(theme);
        
        String html = '<!DOCTYPE html>';
        html += '<html lang="en">';
        html += '<head>';
        html += '<meta charset="UTF-8">';
        html += '<meta name="viewport" content="width=device-width, initial-scale=1.0">';
        html += '<title>' + title + '</title>';
        html += generateCSS(colors);
        html += '</head>';
        html += '<body>';
        
        // Title slide
        html += '<div class="slide title-slide">';
        html += '<h1>' + title + '</h1>';
        html += '<p class="subtitle">Generated by Salesforce</p>';
        html += '<p class="date">' + System.now().format('MMMM d, yyyy') + '</p>';
        html += '</div>';
        
        // Content slides
        for (Integer i = 0; i < slides.size(); i++) {
            html += generateSlide(slides[i], i + 1);
        }
        
        // Navigation
        html += generateNavigation(slides.size() + 1);
        html += generateJavaScript();
        html += '</body>';
        html += '</html>';
        
        return html;
    }
    
    /**
     * Process content into individual slides
     */
    private static List<String> processContentIntoSlides(String content) {
        List<String> slides = new List<String>();
        
        // Split by double line breaks (paragraphs)
        String[] paragraphs = content.split('\n\n');
        
        for (String paragraph : paragraphs) {
            if (String.isNotBlank(paragraph.trim())) {
                slides.add(paragraph.trim());
            }
        }
        
        return slides;
    }
    
    /**
     * Generate individual slide HTML
     */
    private static String generateSlide(String content, Integer slideNumber) {
        String html = '<div class="slide content-slide" data-slide="' + slideNumber + '">';
        
        // Extract title from first sentence
        List<String> sentences = content.split('\\.');
        String slideTitle = sentences.size() > 0 ? sentences[0].trim() : 'Slide ' + slideNumber;
        
        html += '<h2>' + slideTitle + '</h2>';
        html += '<div class="slide-content">';
        
        // Convert sentences to bullet points
        html += '<ul>';
        for (String sentence : sentences) {
            if (String.isNotBlank(sentence.trim()) && sentence.trim().length() > 10) {
                html += '<li>' + sentence.trim() + '</li>';
            }
        }
        html += '</ul>';
        
        html += '</div>';
        html += '<div class="slide-number">Slide ' + slideNumber + '</div>';
        html += '</div>';
        
        return html;
    }
    
    /**
     * Get theme colors
     */
    private static Map<String, String> getThemeColors(String theme) {
        Map<String, String> colors = new Map<String, String>();
        
        switch (theme.toLowerCase()) {
            case 'blue':
                colors.put('primary', '#2563EB');
                colors.put('secondary', '#60A5FA');
                colors.put('accent', '#DBEAFE');
                break;
            case 'green':
                colors.put('primary', '#059669');
                colors.put('secondary', '#34D399');
                colors.put('accent', '#D1FAE5');
                break;
            case 'purple':
                colors.put('primary', '#7C3AED');
                colors.put('secondary', '#A78BFA');
                colors.put('accent', '#EDE9FE');
                break;
            case 'orange':
                colors.put('primary', '#EA580C');
                colors.put('secondary', '#FB923C');
                colors.put('accent', '#FED7AA');
                break;
            default:
                colors.put('primary', '#2563EB');
                colors.put('secondary', '#60A5FA');
                colors.put('accent', '#DBEAFE');
        }
        
        return colors;
    }
    
    /**
     * Generate CSS styles
     */
    private static String generateCSS(Map<String, String> colors) {
        String css = '<style>';
        css += '* { margin: 0; padding: 0; box-sizing: border-box; }';
        css += 'body { font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif; overflow: hidden; }';
        css += '.slide { width: 100vw; height: 100vh; padding: 60px; display: none; position: relative; }';
        css += '.slide.active { display: flex; flex-direction: column; }';
        css += '.title-slide { background: linear-gradient(135deg, ' + colors.get('primary') + ' 0%, ' + colors.get('secondary') + ' 100%); color: white; justify-content: center; align-items: center; text-align: center; }';
        css += '.title-slide h1 { font-size: 3.5em; margin-bottom: 30px; font-weight: 300; }';
        css += '.title-slide .subtitle { font-size: 1.5em; margin-bottom: 20px; opacity: 0.9; }';
        css += '.title-slide .date { font-size: 1.2em; opacity: 0.8; }';
        css += '.content-slide { background: #f8fafc; color: #1e293b; }';
        css += '.content-slide h2 { font-size: 2.5em; color: ' + colors.get('primary') + '; margin-bottom: 40px; font-weight: 400; }';
        css += '.slide-content ul { font-size: 1.4em; line-height: 1.8; }';
        css += '.slide-content li { margin-bottom: 20px; padding-left: 10px; }';
        css += '.slide-number { position: absolute; bottom: 30px; right: 30px; color: #64748b; font-size: 1.1em; }';
        css += '.navigation { position: fixed; bottom: 30px; left: 50%; transform: translateX(-50%); z-index: 1000; }';
        css += '.nav-btn { background: ' + colors.get('primary') + '; color: white; border: none; padding: 12px 20px; margin: 0 10px; border-radius: 25px; cursor: pointer; font-size: 1em; }';
        css += '.nav-btn:hover { background: ' + colors.get('secondary') + '; }';
        css += '.nav-btn:disabled { background: #94a3b8; cursor: not-allowed; }';
        css += '@media print { .slide { page-break-after: always; display: block !important; height: auto; } .navigation { display: none; } }';
        css += '</style>';
        
        return css;
    }
    
    /**
     * Generate navigation controls
     */
    private static String generateNavigation(Integer totalSlides) {
        String nav = '<div class="navigation">';
        nav += '<button class="nav-btn" onclick="previousSlide()">← Previous</button>';
        nav += '<span id="slide-counter" style="color: #64748b; margin: 0 20px;">1 / ' + totalSlides + '</span>';
        nav += '<button class="nav-btn" onclick="nextSlide()">Next →</button>';
        nav += '</div>';
        
        return nav;
    }
    
    /**
     * Generate JavaScript for slide navigation
     */
    private static String generateJavaScript() {
        String js = '<script>';
        js += 'let currentSlide = 0;';
        js += 'const slides = document.querySelectorAll(".slide");';
        js += 'const totalSlides = slides.length;';
        js += 'function showSlide(n) {';
        js += '  slides[currentSlide].classList.remove("active");';
        js += '  currentSlide = (n + totalSlides) % totalSlides;';
        js += '  slides[currentSlide].classList.add("active");';
        js += '  document.getElementById("slide-counter").textContent = (currentSlide + 1) + " / " + totalSlides;';
        js += '  document.querySelector(".nav-btn").disabled = currentSlide === 0;';
        js += '  document.querySelectorAll(".nav-btn")[1].disabled = currentSlide === totalSlides - 1;';
        js += '}';
        js += 'function nextSlide() { if (currentSlide < totalSlides - 1) showSlide(currentSlide + 1); }';
        js += 'function previousSlide() { if (currentSlide > 0) showSlide(currentSlide - 1); }';
        js += 'document.addEventListener("keydown", function(e) {';
        js += '  if (e.key === "ArrowRight") nextSlide();';
        js += '  if (e.key === "ArrowLeft") previousSlide();';
        js += '});';
        js += 'showSlide(0);';
        js += '</script>';
        
        return js;
    }
    
    /**
     * Test method
     */
    public static void testHTMLGeneration() {
        PresentationRequest request = new PresentationRequest();
        request.content = 'Welcome to Salesforce Presentations. This is the first slide content. ' +
                         'Artificial Intelligence is transforming business processes. Machine learning enables predictive analytics and automation. ' +
                         'Salesforce Einstein provides AI capabilities. Smart recommendations improve user experience and productivity.';
        request.title = 'Salesforce AI Overview';
        request.theme = 'blue';
        
        List<PresentationRequest> requests = new List<PresentationRequest>{ request };
        List<PresentationResult> results = generateHTMLPresentation(requests);
        
        for (PresentationResult result : results) {
            System.debug('Presentation URL: ' + result.presentationUrl);
            System.debug('File ID: ' + result.fileId);
        }
    }
} 